Misc/control
    NOP
    STOP


Jumps/calls

Load/Move/Store
    [x] void ld(int addr, int value);
    [x] void ld(Register8Bit r, int value);
    [x] void ld(Register16Bit r, int value);
    [x] void pop(Register8Bit r1, Register8Bit r2);
    [x] void push(Register8Bit r1, Register8Bit r2);

    * Helper Methods:
        [x] int getValue(int addr);
        [x] int getValue(Register8Bit r);
        [x] int getValue(Register16Bit r);
        [x] int getValue(Register8Bit r1, Register8Bit r2);

Arithmetic/Logical
    [x] void inc(int addr);
    [x] void inc(Register8Bit r);
    [x] void inc(Register16Bit r);
    [x] void inc(Register8Bit r1, Register8Bit r2);
    [x] void dec(int addr);
    [x] void dec(Register8Bit r);
    [x] void dec(Register16Bit r);
    [x] void dec(Register8Bit r1, Register8Bit r2);
    [x] void add(Register8Bit r, int value);
    [x] void add(Register16Bit r, int value);
    [x] void add(Register8Bit r1, Register8Bit r2, int value);
    [x] void adc(Register8Bit r, int value);
    [x] void sub(Register8Bit r, int value);
    [x] void sub(Register16Bit r, int value);
    [x] void sub(Register8Bit r1, Register8Bit r2, int value);
    [x] void sbc(Register8Bit r, int value);
    [x] void and(Register8Bit r, int value);
    [x] void xor(Register8Bit r, int value);
    [x] void or(Register8Bit r, int value);
    [x] void cp(Register8Bit r, int value);